[
  {
    "description": "Apply Purchase Delete Functions - Step 1: Create calculate_current_stock_at_purchase function",
    "mcpCall": {
      "tool": "mcp_supabase_execute_sql",
      "args": {
        "project_id": "mtyudylsozncvilibxda",
        "query": "CREATE OR REPLACE FUNCTION calculate_current_stock_at_purchase(product_name_param TEXT, date_param DATE) RETURNS TABLE(current_stock INTEGER) LANGUAGE plpgsql SECURITY DEFINER AS $$ BEGIN RETURN QUERY SELECT ((SELECT COALESCE(SUM(p2.purchase_qty), 0) FROM public.inventory_purchases p2 WHERE p2.product_name = product_name_param AND p2.date <= date_param) - (SELECT COALESCE(SUM(s.quantity), 0) FROM public.inventory_sales_new s WHERE s.product_name = product_name_param AND s.date <= date_param) - (SELECT COALESCE(SUM(c.consumption_qty), 0) FROM public.inventory_consumption c WHERE c.product_name = product_name_param AND c.date <= date_param)) AS current_stock; END; $$;"
      }
    }
  },
  {
    "description": "Apply Purchase Delete Functions - Step 2: Create recalculate_stock_after_purchase_delete function",
    "mcpCall": {
      "tool": "mcp_supabase_execute_sql",
      "args": {
        "project_id": "mtyudylsozncvilibxda",
        "query": "CREATE OR REPLACE FUNCTION recalculate_stock_after_purchase_delete(deleted_product_id UUID, deleted_date DATE, deleted_quantity INTEGER) RETURNS INTEGER LANGUAGE plpgsql SECURITY DEFINER AS $$ DECLARE updated_count INTEGER := 0; purchase_record RECORD; new_current_stock INTEGER; new_stock_taxable_value DECIMAL; new_stock_igst DECIMAL; new_stock_cgst DECIMAL; new_stock_sgst DECIMAL; new_stock_total_value DECIMAL; BEGIN FOR purchase_record IN SELECT * FROM purchase_history_with_stock WHERE product_id = deleted_product_id AND date >= deleted_date ORDER BY date ASC LOOP SELECT (((SELECT COALESCE(SUM(p2.purchase_qty), 0) FROM inventory_purchases p2 WHERE p2.product_name = purchase_record.product_name AND p2.date <= purchase_record.date) - (SELECT COALESCE(SUM(s.quantity), 0) FROM inventory_sales_new s WHERE s.product_name = purchase_record.product_name AND s.date <= purchase_record.date) - (SELECT COALESCE(SUM(c.consumption_qty), 0) FROM inventory_consumption c WHERE c.product_name = purchase_record.product_name AND c.date <= purchase_record.date)) - deleted_quantity) INTO new_current_stock; new_current_stock := GREATEST(new_current_stock, 0); new_stock_taxable_value := new_current_stock * COALESCE(purchase_record.mrp_excl_gst, 0); new_stock_igst := new_current_stock * COALESCE(purchase_record.mrp_excl_gst, 0) * (COALESCE(purchase_record.gst_percentage, 18) / 100.0); new_stock_cgst := new_current_stock * COALESCE(purchase_record.mrp_excl_gst, 0) * (COALESCE(purchase_record.gst_percentage, 18) / 200.0); new_stock_sgst := new_current_stock * COALESCE(purchase_record.mrp_excl_gst, 0) * (COALESCE(purchase_record.gst_percentage, 18) / 200.0); new_stock_total_value := new_stock_taxable_value + new_stock_igst + new_stock_cgst + new_stock_sgst; UPDATE purchase_history_with_stock SET current_stock_at_purchase = new_current_stock, computed_stock_taxable_value = new_stock_taxable_value, computed_stock_igst = new_stock_igst, computed_stock_cgst = new_stock_cgst, computed_stock_sgst = new_stock_sgst, computed_stock_total_value = new_stock_total_value, updated_at = NOW() WHERE purchase_id = purchase_record.purchase_id; updated_count := updated_count + 1; END LOOP; RETURN updated_count; END; $$;"
      }
    }
  },
  {
    "description": "Apply Purchase Delete Functions - Step 3: Create delete_purchase_with_stock_recalculation function",
    "mcpCall": {
      "tool": "mcp_supabase_execute_sql",
      "args": {
        "project_id": "mtyudylsozncvilibxda",
        "query": "CREATE OR REPLACE FUNCTION delete_purchase_with_stock_recalculation(purchase_id_param UUID) RETURNS JSONB LANGUAGE plpgsql SECURITY DEFINER AS $$ DECLARE purchase_to_delete RECORD; product_record RECORD; updated_records_count INTEGER; new_product_stock INTEGER; BEGIN SELECT * INTO purchase_to_delete FROM purchase_history_with_stock WHERE purchase_id = purchase_id_param; IF NOT FOUND THEN RETURN jsonb_build_object('success', false, 'error', 'Purchase record not found'); END IF; SELECT * INTO product_record FROM product_master WHERE id = purchase_to_delete.product_id; IF NOT FOUND THEN RETURN jsonb_build_object('success', false, 'error', 'Product not found'); END IF; DELETE FROM purchase_history_with_stock WHERE purchase_id = purchase_id_param; SELECT recalculate_stock_after_purchase_delete(purchase_to_delete.product_id, purchase_to_delete.date, purchase_to_delete.purchase_qty) INTO updated_records_count; SELECT current_stock - purchase_to_delete.purchase_qty INTO new_product_stock FROM calculate_current_stock_at_purchase(purchase_toDelete.product_name, CURRENT_DATE); new_product_stock := GREATEST(new_product_stock, 0); UPDATE product_master SET stock_quantity = new_product_stock, updated_at = NOW() WHERE id = purchase_to_delete.product_id; INSERT INTO stock_history (product_id, product_name, hsn_code, units, date, previous_qty, current_qty, change_qty, stock_after, change_type, reference_id, source, created_at) VALUES (purchase_to_delete.product_id, purchase_to_delete.product_name, COALESCE(purchase_to_delete.hsn_code, ''), COALESCE(purchase_to_delete.units, 'pcs'), NOW(), product_record.stock_quantity, product_record.stock_quantity, -(purchase_to_delete.purchase_qty), new_product_stock, 'purchase_delete', purchase_id_param, 'Deleted Purchase Invoice: ' || COALESCE(purchase_to_delete.purchase_invoice_number, 'N/A'), NOW()); RETURN jsonb_build_object('success', true, 'message', 'Purchase deleted successfully and subsequent records updated', 'data', jsonb_build_object('deletedQty', purchase_to_delete.purchase_qty, 'newStock', new_product_stock, 'productName', product_record.name, 'updatedRecords', updated_records_count)); EXCEPTION WHEN OTHERS THEN RETURN jsonb_build_object('success', false, 'error', SQLERRM); END; $$;"
      }
    }
  },
  {
    "description": "Verify Functions Created Successfully",
    "mcpCall": {
      "tool": "mcp_supabase_execute_sql",
      "args": {
        "project_id": "mtyudylsozncvilibxda",
        "query": "SELECT routine_name, routine_type FROM information_schema.routines WHERE routine_name LIKE '%purchase%' AND routine_schema = 'public' ORDER BY routine_name;"
      }
    }
  },
  {
    "description": "Check Current Purchase History Data",
    "mcpCall": {
      "tool": "mcp_supabase_execute_sql",
      "args": {
        "project_id": "mtyudylsozncvilibxda",
        "query": "SELECT product_name, purchase_qty, current_stock_at_purchase, date FROM purchase_history_with_stock ORDER BY date DESC LIMIT 10;"
      }
    }
  },
  {
    "description": "Test Stock Calculation Function",
    "mcpCall": {
      "tool": "mcp_supabase_execute_sql",
      "args": {
        "project_id": "mtyudylsozncvilibxda",
        "query": "SELECT product_name, current_stock_at_purchase FROM purchase_history_with_stock WHERE product_name IS NOT NULL LIMIT 1;"
      }
    }
  }
] 